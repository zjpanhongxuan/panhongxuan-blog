{"posts":[{"title":"CSP 2022 游记（下）","text":"CSP2022游记（上） $\\Huge{2022.10.29}$约12:30 去吃午饭聊了会儿，八（4）班除了cyl其他都炸了，阿来的$rp$是真的好。 yyh发现他T2没有特判答案为非正数的情况…… (感谢对拍，帮我发现我没有特判并改回来） 约13:30 回到$\\text{学军中学（紫金港校区）}$约13:35 进校门约13:40 到达机房门口遇到了zjx和sry，还有xty，又遇到了lx，还遇到了zlx巨佬。 zlx巨佬一个小时就AK了J组，又用了半个小时测样例，太巨了！ 约14:10 进机房键盘还是那样，我又用了餐巾纸垫着。 不知道打什么模板好（因为我太菜了），就线段树乱打了一部分。 又通过压缩包知道了题目的名字，把子文件夹建好了。 约14:25 公布试题密码密码：belief2022 打开来看。 $\\Huge{14:30}$ $\\Huge{\\color{red}\\text{正式开始 CSP-S 2022 考试}}$T1没什么思路，感觉这题挺奇怪的，给定了要玩恰好$4$个不同的景点。 去看T2，这题看着舒服多了 （因为暴力很好打），就想了一会儿，先把具有特殊性质$2$ （$l_1=r_1 \\lor l_2=r_2$）的部分分想出来了。 再去想正解，画了一张思维导图方便写代码。 $15:00$写好代码，用了$6$个ST表（$c$是$a$的最大值，$d$是$b$的最大值，$f$是$a$的最小值，$g$是$b$的最小值，$P$是$a$中是否有$0$，$Q$是$b$中是否有$0$）。 第一个小样例过了，第二个样例错了，发现还要再加$2$个ST表（$S$是$a$中正数的最小值，$T$是$a$中负数的最大值）。 还发现$Q$是多余的，删掉。 第二个样例过了，其他几个大样例都过了。 心态好了很多。 $15:30$去看T3，题目看好后就推了一会儿样例。 考场上本来是想拓扑排序，结果灵感一来，发现了一些性质。（考场上没有下面这样的推理，就是灵感感觉实现反击和实现连续穿梭是等价的） 我的做法： 记录以这个节点为终点的边不方便，所以先建反向边。 下面的边、出度等都是指原来的边。 首先分析实现连续穿梭，即每个节点的出度都为$1$。 那么从任何一个节点出发，都可以走到另一个节点。 再从这个走到的节点出发，可以再走到另一个节点（可以和第一个节点相同）。 这就是实现反击的条件！ 即实现反击和实现连续穿梭是等价的！ 那么只要建反向边，并维护每个点的入度和有多少个点的入度是$1$即可。 $16:00$想好了T3，又花了$20$分钟写好。 第一个小样例错了，调试了一会儿，对了。 大样例都过了，不过最后一个大样例开O2跑了$2.236$秒…… $16:30$现在灵感就没有之前那么活跃了。 T4写了个$O(n^2)$的暴力，结果第二个小样例没过，改成了$k=1$时的代码，结果多加了个a[p]…… 其实原来暴力能得$40$分，$k=1$有$16$分…… $40 \\rightarrow 16 \\rightarrow 0$ 呜呜呜…… $17:00$只剩$90$分钟了！ 去写T1，结果没看到要不同的节点，$k=1$和dp都没对，改成了$O(n^4)$的部分分。 $17:30$只剩$1$个小时了！ 去对拍，经过一番折腾，发现了T2的小错误并改掉。 又被大样例给坑了…… T3暴力写好，突然发现很难造数据，没对拍。 $18:20$对拍好了，只剩$10$分钟了！ 匆匆忙忙地测了一下样例，保证没有错误。 $18:28$检查好了，再检查了一下文件名。 检查好就坐着，等待考试结束。 $\\Huge{18:30}$ $\\Huge{\\color{red}\\text{CSP-S 2022 考试结束}}$估分：$40$+$100$+$100$+$16$=$256$ 自我感觉还比较好。 大家好像都T2用了很多个ST表。 yyh估分105分。 szh巨佬估分305分！太巨了！ szh巨佬T3思路和我一样，他说这样会超时，只有$60$分。 他T3最大的大样例没开O2跑了十几秒。 现在估分：$40$+$100$+$60$+$16$=$216$ 突然想到T4多加了个a[p]。 现在估分：$40$+$100$+$60$+$0$=$200$ 自我感觉还行。 约19:00 去吃晚餐用小图灵的估分系统估了一下，我的J组$380$分。 szh巨佬AK了。 zry巨佬也AK了。 yyh炸成了200，他T2在不留意间特判了一下答案为非正数，避免了炸掉。 cyl巨佬385分，阿来的$rp$真的太好了。 约19:40 晚餐吃好，上车回慈溪在车上听小火星的复赛讲评。 yyh一直沉默不语，没有昨天那么活泼。 不过过了约2个小时，yyh又在说这些东西，他说这是“苦中作乐”。 我焦急地等待着小图灵的S组估分，结果等了几个小时都没出来…… 看小火星的复赛讲评，S组T3正解要用到哈希。 突然有点怀疑自己的正确性，但是szh巨佬也是这个做法，放心了一点。 我望着窗外的夜景，不禁想起了去年来杭州： 去年，也是穿过了这条隧道；今年，我们又上了那座高架。 不同的学校，同一座城市。 不同的年龄，同一个目标。 我胸中感慨万分。 让去年的遗憾，被今年的奋斗所弥补吧！ 转眼间，我们来到了钱塘江大桥。 钱塘江的江水依然流着，但去年与今年有那么大的转变。 年年，我们在杭州相聚，踌躇满志；年年，我们又在这座城市留下欢笑与遗憾。 而今日，我们又将在奋斗之后，离开这满载着我们汗水的城市。 Ade，杭州！Ade，钱塘江！ 明年我们再在杭州相聚！ 约22:10 回到上林中学约22:30 回到家熬夜查S组估分，结果小图灵的S组估分一直没有出来…… 上洛谷估分，但是洛谷S组T3一直没有数据。 S组T1洛谷估分$40$，T2洛谷估分$100$，T4炸掉了…… 突然发现T4最开始的$O(n^2)$暴力可以获得$40$分…… $\\Huge{2022.10.30}$约0:10 去睡觉约6:30 起床去洛谷测了一下S组T3最大的大样例，结果跑了$2.007$秒…… 我服了。 很神奇的是，把printf改成puts后只跑了约$1.06$秒，当然会有换行符的问题。 突然很庆幸考场上没有想到用puts。 然后在洛谷上传别人的S组T3民间数据，折腾了一会儿。 结果民间数据太水了，S组T3估分$100$。 在洛谷上S组估分$40+100+100+0=240$ 在Infoj上S组估分$40+100+60+0=200$ 在计蒜客上S组估分$40+100+100+0=240$ 自我感觉S组估分$40+100+[60,100]+0=[200,240]$ 希望能在ZJ获得S组一等奖。 $\\Huge{2022.10.31}$约20:10S组就差$10$分一等！！！！！！！！ xty全打暴力竟然有230！！！！！！！ $\\color{purple}\\Huge{\\text{默哀}}$ 约20:30分数线降了，还差$7$分！ 约20:35分数线又降了，还差$6$分！ 约20:41分数线又降了，还差$5$分！ $\\Huge{2022.11.1}$约20:30名次上升了，再上升$8$名就有一等奖了！ $\\Huge{2022.11.2}$约20:45名次又上升了，再上升$6$名就有一等奖了！ $\\Huge{2022.11.17}$约20:30看到奖项了，$\\text{J}$一等，$\\text{S}$二等…… $\\color{purple}\\Huge{\\text{默哀}}$","link":"/article/1336513511/"},{"title":"CSP 2022 游记（上）","text":"总体比较顺利。 $\\Huge{2022.10.28}$约14:00 上大巴车我和yyh坐相邻的位置。 七年级就只有我和yyh是跟大部队走的。 yyh先复习了一会儿字典树和线段树。 我发现我的学校的保证书没带。 看着窗外杭州的景色，我不禁回忆起了去年来杭州…… 我问自己：我能弥补去年的遗憾吗？ 虽然踌躇满志，但是还是有些害怕：万一J组出大模拟怎么办？ 我立下誓言：今年一定要获得J组一等奖，不然我就退役！ 我又立下誓言：今年S组至少要获得二等奖，不然我也退役！ yyh第一次参加CSP，太活泼了，一直在说一些东西。 我想到了gza赛前那么活泼。 我和yyh在讨论gza今年会不会炸掉：gza考前太活泼了，不稳重，而且很喜欢他的卡常邪教。 yyh又在说一些东西了。 是的，太活泼不好，我们要稳重一点。 约17:00 到达酒店酒店挺不错的，还提供厨房，不过用不上。 噪音也比去年少多了，关上窗就几乎没有噪音。 约17:30 去吃饭约18:15 到达饭馆一个叫做“江南鱼多多”的饭馆。 szh巨佬的父亲好像跟饭馆的主人认识。 约19:15 吃好饭，回酒店约19:45 回到酒店我借了yyh学校的保证书来复印。 感谢yyh巨佬！ 约20:00 睡觉当然睡不着…… 到22:00左右才睡着。 $\\Huge{2022.10.29}$约6:45 去酒店二楼吃早餐早餐挺不错的，还遇见了黄奕文 约7:15 上车，去$\\text{学军中学（紫金港校区）}$约7:30 到达$\\text{学军中学（紫金港校区）}$站在大门前合影。 约7:40 进校门路挺短的，比去年杭师大要短得多。 约7:50 到达机房门外遇到了zzy,dly,lym，还遇见了黄奕文（正在复习STL）。 约8:00 进机房我的机位在角落里（G7），不过并不影响状态。 键盘在桌子里，和桌子一样高，很不顺手，我就用餐巾纸垫起来了。 这样搞的话，打草稿的地方的宽度只有约$5 \\textrm{cm}$到$10 \\textrm{cm}$，不过对我来说足够了。 打了几个模板（最后都没用上）。 密码虽然还没公布，但是压缩包里可以看到四题的名字，于是我先建好了子文件夹。 8:25 公布试题密码密码是：mountain2022 打开来看了一会儿。 $\\Huge{8:30}$ $\\Huge{\\color{red}\\text{正式开始 CSP-J 2022 考试}}$T1肯定会做，去看T2。 T2思路想了一半，没想到二元二次方程组，去看T3。 T3跳过，去看T4。 T4也没什么思路，心态不好。 回过头来先把T1做好，并打了对拍（一个是n*k&gt;1e9，另一个是n&lt;=1e9/k） 再去想T2，恍然大悟：原来是个二元二次方程组！ 又有点忘了一元二次方程的公式，又想了出来，但是算出的结果不对（是个分数），于是推了一会儿一元二次方程的公式。 推出来之后再算，发现之前算错了。 算对了之后去打代码，为y*y会不会溢出long long，用高精度还是double而纠结，后来突然看到$m \\le 10^9$，才发现不会溢出。 $9:00$打好T2用了约$10$分钟。 心态好了很多。 去看T3。 T3跳过，去看T4。 T4灵感突然来了，发现是dp。 又花了约$20$分钟打好T4并调试。 大样例真坑，只有最小的样例我错了，其他都是对的，感谢小样例，让我发现代码有问题！ $9:30$已经做好了$3$道题，心态又好了很多。 T3没有什么思路，赛前没怎么复习表达式，于是用栈乱搞，花了约$30$分钟，把表达式的值算对了。 心态又好了很多。 $10:00$又去搞短路的数量，又花了约$20$分钟写好，但是连最小的小样例都过不去。 开始调试，写了很多cout来调试，又花了约$15$分钟，把小样例调对了，$4$个样例只对了前面$2$个小样例。 $10:35$又乱搞了一会儿，没搞出来，已经快$11:00$了，于是放掉T3，去对拍。 心态有点不好。 $11:00$很仓促地把T2和T4对拍好。 T2大样例真坑，我没有特判答案为非正数竟然没有错，还是对拍发现了错误，立即加上特判。 $11:30$再去搞T3。 乱搞了一会儿还没搞出来。 $11:40$灵感又突然来了，把if改成了while，竟然过了第三个大样例！ 心态又好了很多。 不过第四个大样例还是过不去，又搞了$5$分钟，还是没搞出来。 $11:50$去检查$4$题的文件输入输出，以及样例是否通过。 $11:58$检查好，又检查了文件名，检查好就坐着，等待考试结束。 $\\Huge{12:00}$ $\\Huge{\\color{red}\\text{CSP-J 2022 考试结束}}$把草稿纸交上去，离开考场，没搞出T3心情不是特别好。 估分：$100+100+60+100=360$ 遇见了zzy，他T3和T4没搞出来，200分。 感觉自己$360$其实还不错。 zry巨佬AK。 gza和yyh都炸了，T3和T4没搞出来，yyh才200分。 突然发现自己T1没有特判$a=1$，cyl说最多扣10分。 估分：$90+100+60+100=350$ CSP2022游记（下）","link":"/article/4145411202/"},{"title":"CSP 2023 游记（上）","text":"\\Huge \\textbf{++RP}123while (1) { ++rp;} $\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%$ 不忘去年之耻（上） 不忘去年之耻（下） 我发誓，如果我今年 CSP-S 搞不到一等奖，我就退役！ $\\textbf{2023.10.19 Thur.}$$12:40$赛前 $2$ 天，开始写这篇游记。 机房里开始疯狂发阿来的照片…… 然后又在疯狂发他人照片…… $18:30\\text{多}$阿来上线了！ 结果他发现： 然后大家又开始大规模膜阿来…… Then: $\\textbf{2023.10.20 Fri.}$$\\text{约}13:50$出发去杭州！ 我家开车，带着 zry 和 zry 老爸，共 $5$ 个人。 先去牛人那边接了一下 zry 老爸，然后去杭州。 xty 和 yyh 一起坐 xty 的 $6$ 座车，我们由于去了一下牛人，要比 xty 和 yyh 慢一点。 我和 zry 先是复习了一下 ZR 上的一些题，然后就开始聊 florr，以及猜测 xty 和 yyh 在干什么。我们猜 xty 在看 florr 视频，yyh 在看 xty 看 florr 视频。 然后就到了一个服务区（忘了什么名字了，只记得前年也来过），下车正好遇见 xty 和 yyh 在门口吃买好的臭豆腐。问了一下，果然 xty 在看 florr 视频，而 yyh 在看 xty 看 florr 视频。 我和 zry 买了一个肯德基全家桶，在路上吃，聊着聊着又聊起 florr 来了…… 然后就到了杭州的收费站（只记得去年也来过），上了高架，一起复习算法。 我们复习了可持久化线段树，其他好像就没了，也就聊聊天，猜测今年 S 组会考什么。 我们得出猜想： 今年肯定不会考字符串，因为前几年一直没考！（不知道今年 T2 算不算） 今年很可能考大模拟，因为之前一直是每隔 $2$ 年或 $3$ 年考一次，而 $\\text{CSP-S 2021}$ 和 $\\text{CSP-S 2022}$ 都没考，因此今年必定考大模拟！（果然被我们猜中了）然后我们还认为如果真的考了那么肯定会寄。 $\\text{约}16:45$到了杭州的亚朵酒店，进了房间。我 $5$ 楼，貌似我们 $4$ 个人没有人在同一个楼层。 我发现我的房号是 $512 = 2^9$，很吉利啊！ 然后我们便在私信里问对方要不要串房，我不敢出去因为我爸妈都出去了，里面没有房卡。 xty 无比诚挚与热情地邀请 （劝说） 我到他的房间看他刷 Super，但是我因为没有房卡就没有去。 zry 也邀请我，我回复了他一个 ok，然后又告诉了他我没有房卡，但是他只看到了 ok，于是先是到了一楼，没遇见我就让酒店的工作人员帮他上 $5$ 楼。 于是 zry 就到了我的房间来，我们一起复习算法，又复习了 exgcd、KMP、数位 dp 等。 zry 打开了一个敲功德的网站，疯狂地用鼠标连点器敲，功德积攒到了 $2 \\times 10^4$ 多。 $\\text{约}18:40$去对面一家小店吃饭，临走前 zry 又打开了鼠标连点器疯狂攒功德。 我吃的是茄子。 又和 zry 聊了一会儿天，zry 说他一般是做完一题打一题对拍（果然巨佬的习惯跟我不一样），他说对拍拍得越多越好，我还是打算按自己习惯，最后 1h 打对拍（虽然实际上今年对拍没找出任何错误） $\\text{约}19:20$吃完饭，回到酒店继续和 zry 一起复习算法。 刚进门，zry 发现他的功德涨到了 $2.627 \\times 10^5$ 多（忘了百位上是什么了，好像是 $7$，千位上也许是 $3$），所以应当存在一个时刻使得这个时刻属于我们进门的时间区间 $[l, r]$ 且此时 zry 的功德为 $262144 = 2^{18} = (2^9)^2$，既是 $2$ 的正整数次幂，又是我的房号的平方，太吉利了！ $\\text{约}20:00$复习考试策略，和 zry 一起快速浏览。 $20:32$zry 回他的房间去睡觉了，我去拉了一下答辩。 $\\text{约}20:50$去睡觉了！ 还是睡不着，过了约 1h（胡乱估计的）才睡着。 $\\textcolor{green}{\\textbf{2023.10.21 Sat.}}$$\\text{约}4:00\\text{多（也是胡乱估计的）}$又醒了（也许是被尿憋醒的，但是醒了后感觉又不是很强烈） 然后就一直没睡着…… 突然发现自己是戴着手表睡觉的。 $\\text{约}5:45$我妈也醒了，让我睡觉，但是我还是睡不着…… $\\text{约}7:00\\text{多一点}$起床，头脑不是特别清醒。 我爸买了麦当劳的打包（当然排了长队），我就吃了一个肉+蛋的卷。 $\\text{约}7:40$出发去考场！ 半路赶上了 szh 和 lc 神佬，我和策佬都是 302 的，一起上三楼，结果上错了（上了左边那个，结果那个是去 $2$ 楼的），那边 $3$ 楼也有约 $10$ 个人，直到 $8:25$ 分的时候我才意识到我们可能走错了，便和策佬一起向另一边飞奔。 电梯关了，于是走楼梯，结果遇见 zlx 神佬正在进考场。 感觉我就跟傻逼一样，前年来来了跟没来一样…… $\\textcolor{green}{\\textbf{8:30}}$$\\textcolor{green}{\\textbf{正式开始 CSP-J 2023 考试}}$终于进了考场，之前已经发布了压缩包密码，只好问监考老师。 压缩包密码：CSP-J2023l!2 打开来，随即又发布了试题密码，刚开始那个老师只报了后面的四个字符，后来才报完整。 由于我们 B 区的默认打开方式是傻逼的福昕浏览器，其他区是 360 浏览器，我们这里一堆人都在说密码错误…… 然后老师才说了要用 360 浏览器，反正我密码输了至少 $5$ 遍是有的。 打开来看，首先把每道题都浏览了一遍，然后去想 T1。 T1 稍微想了一会儿就想出来了，T2 想了一会儿，先想出一个 $O(n^2)$ 的 dp，然后就想到了贪心（想出最终贪心实现的过程有点曲折）。 T3 跳过，去看 T4。最开始打了个记搜，但是发现记搜是倒着的，比较难实现，又去打了拓扑，发现可能存在环且很难建边，于是去打了一个类似于 dijkstra 的东西。 打完 T4，去看 T3，因为 360 浏览器没法编辑 pdf，我就截图了下来，用画图编辑，用红笔划出重点。 电脑屏幕不宽（约等于正方形），没法把题面放左边并把 C++ 放右边，我就把截图放在上面（放的很窄），把 C++ 放在下面对照着打。 然后就打好并调好了第 $2$ 个小样例。 此时是 $10:30$ 了，又花了半个小时打完 T1 T2 的对拍。 时间到了 $11:02$，我直接找监考老师问能不能睡觉，老师说可以，我就趴在桌子上睡觉。当然睡不着，越到后面越兴奋，还中途起来几次去测了一下样例，或者看对拍拍了多少组。 一些花絮： zlx 神佬带了个电子手表，在门口监考老师让他交了上去，我带了个机械手表以为也要交上去，于是就交了…… 我的座位靠窗，有反光，我让监考老师拉了一下窗帘。（因为都考试开始了，没法自己拉） 我用了 xyy 告诉我的编译指令： 1-std=c++11 -O2 -Wall -Wl,--stack=2000000000 结果 2000000000 还是太大了，导致我那边使用字符串时经常出现玄学错误（主要是在测样例的程序里，我还以为是环境不对），浪费了一点时间（直到下午 S 组打 T2 时才发现是这个错误，改成 1000000000 就没问题了） 我的对拍程序有一次卡住了，输出了一个 -，关都关不掉（而且它是在拍第 $3$ 组数据的时候卡的），任务管理器里也没有显示，刚开始我觉得这玩意没影响就没管，睡觉约 $0.5\\textrm{h}$ 后（约 $11:30$），我才想起最后要把所有程序关掉，还怕因为这玩意而导致代码无法复制（也许是我想多了），就叫了监考老师，监考老师又叫了另一个老师，确认我的代码都保存好后，把我的电脑注销后重新进去（密码：123456），这下子就没问题了。 $\\textcolor{green}{\\textbf{12:00}}$$\\textcolor{green}{\\textbf{CSP-J 2023 考试结束}}$出考场，遇见了 lottle 巨佬，他说他 $2\\textrm{h}$ 就 AK 了，太巨了！ 还遇见了策佬，商量 T4 的做法（策佬的做法我忘了，好像是记搜）。 然后遇见了 yyh 爸妈，他们说我爸妈让他们接我。 等 yyh 出来后就一起走，yyh 说他 T4 没搞出来，只打了部分分。 还遇见了黄奕文，他 T4 也是打的部分分。 yyh 说他最开始 T1 没想出来，先打了 T2，再打了 T3，然后才去打 T1。 yyh 还说他 T2 用了 ST 表 + 二分，果然巨佬的思维就是跟我这种蒟蒻不一样%%%%%%%%%%%%%%%%%%%%%%%%%%YYH 而且听说 xty T1 不会正解，打了 $90$ 分（反正对于他来说和正解一样）。 yyh 不知道为什么搞到了 zry 的校牌，给了我，让我帮他还给 zry。 路上在和 yyh 爸妈以及 yyh 商量要不要去拍照。 然后就出了校门，Zou Sir 让我们去拍照。 我们就去正大门前面的草坪去拍照，还在校门口遇见了阿来，就好好地膜拜了一下他 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%CYL 拍照好像只有 zry 没有来，其他人都来了。听 skb 说 szh 神佬只花了 $77\\textrm{min}$ 就 AK 了 J 组，太巨了%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%szh神佬 然后就回酒店了。 CSP 2023 游记（下）","link":"/article/1890795457/"},{"title":"CSP 2023 初赛游记","text":"\\Huge \\textbf{RP++}不忘去年之耻（上） 不忘去年之耻（下） 我发誓，如果我今年 CSP-S 搞不到一等奖，我就退役！ $\\textbf{2023.9.15}$$15:50$初赛前一天，开始写这篇游记。 （还有一堆作业要补，先欠着吧，回去申请一下免作业） 约 $17:50$和 zry, gza, xty 一起出校门，因为班主任还在吃饭，没有申请免作业，就心里假装免作业了，免得有心理负担。yyh 竟然没有夜自习请假…… 今天的语文打卡还没打，本来不想打的，但是语文老师在催…… 约 $22:00$去睡觉，经过约1个小时才睡着…… $\\textbf{2023.9.16}$约 $7:30$起床，昨天晚上没睡好，半夜又醒了，折腾了一两个小时又睡着了…… 约 $8:15$出发去余姚，路上基本都在闭着眼休息。 约 $9:05$到达余姚中学，在实验楼门口遇见了gza, skb, hyt, wlt。 约 $9:15$进入阶梯教室，不得不吐槽这桌子是真的窄，竖着放答题卡都放不下，得小心点，免得把答题卡弄折了…… 阿来跟我同一行，之间只隔着一个人，所以很容易膜拜阿来并吸收 RP。和我一样都在中区的除了阿来还有策佬，cps。在北边的有zjx和skb，在南边的有zzy。 $\\Large \\textbf{9:30}$ \\Huge\\textbf{正式开始 CSP-J 2023 初赛考试}","link":"/article/340812618/"},{"title":"CSP 2023 游记（下）","text":"\\Huge \\textbf{++RP}123while (1) { ++rp;} $\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%$ 不忘去年之耻（上） 不忘去年之耻（下） 我发誓，如果我今年 CSP-S 搞不到一等奖，我就退役！ CSP 2023 游记（上） $\\textcolor{green}{\\textbf{2023.10.21 Sat.}}$$\\text{约}12:30$回到酒店，先吃了午饭（米线），是机器人送餐的。 $\\text{约}12:55$去睡觉了。 $\\text{约}13:40$起床，出发去考场。 $14:10$到达考场，进机房。 我的座位又是靠窗的，自己把窗帘拉上了。 打了模板和测样例的模板。 lottle 就在我前面的右边，可以吸收他的RP。%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%lottle $\\textcolor{green}{\\textbf{14:30}}$$\\textcolor{green}{\\textbf{正式开始 CSP-S 2023 考试}}$先整体地浏览了一遍，花了约 $20\\textrm{min}$。 看到 T1，我难以相信自己的眼睛：这不就是暴力就行了吗！ 于是花了约 $15\\textrm{min}$ 打完 T1。 再去看 T2。 T2 的思考过程有点波折，先是想到了 $O(n^3)$ 的区间 dp，然后又联想到括号序列，想对整个序列从左往右做一遍匹配，以为自己想到了正解，有点兴奋。 然后突然发现自己的做法只适用于整个序列是可消除的情况，又冷静下来思考，想出了 50pts 的 $O(n^2)$ 的栈做法，并打好了这个 $O(n^2)$ 的做法。 然后开始思考正解。先是想到了暴力跳 nxt 的做法，觉得这玩意是个很神奇的暴力，就写了一下。然后又顺着思路想到了正解，把正解打好了，结果发现样例 #1 #2 过得去，样例 #3 #4 过不去还在那边一直卡着，以为自己做法会 T（实际上是因为我把 $\\le 8000$ 的数据写了 $O(n^2)$ 的暴力，$&gt; 8000$ 的数据写了正解，但是正解有个细节打错了）。 于是改成了暴力跳 nxt 的做法（我当时脑抽以为这玩意每个点只会往后跳至多 $26$ 次，以为自己可以证明它的时间复杂度是 $O(26n)$ 的，同时看到这玩意的空间复杂度是 $O(n)$ 的，更优，就改成了这个暴力跳 nxt 的做法），还是后两个点一直卡着。 然后就开始调试，发现了错误并改正，但是由于我以为这玩意每个点只会往后跳至多 $26$ 次，所以还是没改成正解。 此时是约 $15:35$。 然后直接跳过 T3，去想 T4。T4 看到有一档部分分是 $n \\le 500$ 的，就被误导了，以为是较复杂的树形 dp。二分答案虽然想到了，但是一直不知道怎么写树形 dp，因为这玩意要存储子树中哪些时刻被用过。 想了约半个小时还是没有思路，只好去打 T3。 这时我有一种感觉，感觉分数线会上 $300$。 此时是约 $16:00$。 打 T3 加上调试花了约 $70\\textrm{min}$。 由于怕变量名和 Linux 冲突，我大部分都是用的拼音作为变量名。 赛后感觉自己打 T3 的速度有点慢。 结果自己判空洞只判了结构体里面的，没判最外层的，导致 $[85, 95] \\rightarrow 40$…… 痛失至少 $45$ 分…… 大样例真坑…… 呜呜呜呜呜…… 难受死了。 我赛后一直怀疑自己没有测第三个大样例（因为我是用自己写的测样例的程序测样例的，并且是从自己写的模板复制过来的，有可能循环变量只循环到了 $2$），但是一直没有公布大样例（到10.22晚上），也就不得而知了…… 此时是约 $17:10$。 时间不多了，如果预留 1h 打对拍的话，T4 只有 $20\\textrm{min}$ 打了！ T4 打了个爆搜和链的部分分。我又脑抽了，原来想的时候想到了状压，但是现在一看到 $n \\le 20$ 就想到爆搜…… 而且脑子瓦特地没看到 $c_i$ 可能为负数…… 只跑了最小的样例（因为爆搜只能过这个样例，其他肯定都会 T）。 此时是约 $17:40$。 本来想打个 T4 的对拍的，结果写造数据的程序的时候发现了 $c_i$ 可能为负数，代码中的二分函数直接废掉，只好去先打 T2 和 T1 的对拍，等会再来打。 先打了 T2 的对拍，没发现什么问题，而且跑的挺快。又打了 T1 的对拍（对照程序是把正解的暴力去掉了哈希），正解的暴力跑的挺快，去掉哈希的对照程序一直要跑 $0.9\\textrm{s}$ 多，偶尔会到 $1.04\\textrm{s}$。 然后去测试 T3 的时间会不会被卡（我打的时候都没考虑时间复杂度的问题，还用了 umap，怕被卡），然后写了个程序造 $98$ 个结构体嵌套花了较长时间，还打错了，导致 T3 程序一直卡着，害的我以为 T3 打炸了，还调试了一会儿。然后才发现是造数据的程序打炸了，并修改好。而且我 T3 的程序跑的挺快的（不到 $0.1\\textrm{s}$）。这段测试 T3 的速度的时间相当于完全浪费…… 此时是约 $18:15 \\sim 18:20$ 重新打 T4 的二分函数，虽然小样例过了，但是把小样例改成了链的情况后暴力和跑出来是 $5$，链的部分分跑出来是 $6$，两个 Sub 的结果不一样……但是也没时间管了…… $\\textcolor{green}{\\textbf{18:30}}$$\\textcolor{green}{\\textbf{CSP-S 2023 考试结束}}$顶多 $300\\textrm{pts}$，感觉分数线真的会上 $300$，不知道是什么样的心情，只是刚刚从惶恐、焦急中走出来了一点点。 和 lottle 聊天，我本想告诉他我 T2 的做法，不过他到一楼就直接被接走了。 遇见了 yyh 爸妈，我们在门外一起等 yyh。 又遇见了策佬，不过只是打了个招呼。 等到了yyh，yyh 说他只做出了 T1，其他全打的部分分。 我就给 yyh 讲我 T2 的做法，不过他好像没心情听…… 好像我遇见的人都没到 $300$，心里突然来了点自信（事实证明我还是高估了自己的分数）。 但是我心里还是很不安、惶恐、焦急，还没有缓过神来，只好大口大口地喘气。毕竟最后时刻调 T3、T4 实在是太紧张了。 又在门外不远处遇见了阿来和 zzy。阿来做出了T1，他 T2 打的是和我一样的暴力，T3 部分分，T4 也是部分分。%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%cyl 我正准备向阿来证明暴力的时间复杂度，突然发现自己证明假了，赛时脑子瓦特了！ 心里顿时非常难受，毕竟自己明明想出了正解的，却换成了暴力。 只好祈求暴力跑的快一点，CCF 数据出水一点。 但是今年出题人看来和去年风格很不一样，感觉数据也许不会出水，说不好把我们的暴力给 hack 掉。 又在路上遇见了 szh 神佬，他前三题全都做出来了，T4 只打了暴力 + 部分分。看来今年 T4 是真的难。顺便膜拜了 szh 神佬。%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%szh $\\text{约}18:45$出校门。遇见了 zry，但没来得及跟他说话；还遇见了 xty，他情况和 yyh 差不多；还遇见了 ljx。%%%%%%%%%%%%%%%%%%%%%zry,xty,ljx Zou Sir 在问我们考的怎么样。 现在只能祈祷 T2 数据出水一点。 然后就直接去酒店停车处，直接开车回家。酒店里的路已经堵住了，不过我并不急。 心里稍微平静了一些。 然后就开始在洛谷上看别人的帖子和动态，看看有没有人和我 T2 一样的，结果就看到了有人发现 CF1223F 是 T2 原题。 开出了酒店，我望着道路两旁的街道，既熟悉、又陌生； 上了*埠大桥（第一个字忘了），我望着底下平静的钱塘江，遥望对面的大莲花体育场，尝试用手机拍下它； 进了隧道，这隧道还是前年、去年的隧道。 上了高架，两旁的高楼还是没有变过。 （未完待续） $\\text{约}21:20$回到家。 看到群里在发核桃测评，去测了一下，$100 + 100 + 40 + 0 = 240$。 核桃测评有点卡，会出现无限 waiting，开个新号就行（我开了 $3$ 个号，一个号能测 $2$ 发）。 $22:40$小图灵出 T2 数据了。 $22:42$开始写游记（之前只是开了个头）。 $\\textbf{2023.10.22 Sun.}$$1:03$我妈在催我，只好去睡觉了。 $8:32$起床上洛谷。","link":"/article/3356448932/"},{"title":"NOIP 2023 游记（上）","text":"\\Huge \\textbf{++RP}123while (1) { ++rp;} $\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%$ 不忘去年之耻（上） 不忘去年之耻（下） 不忘今年之险（上） 不忘今年之险（下） 我发誓，如果我今年 NOIP 搞不到一等奖，我就退役！ 争取获得省选体验资格！ $\\textbf{2023.11.12 Sun.}$距 NOIP 2023 还有 6 天 $7:40 \\sim 11:20$在机房训练，做了套「SCP 2021 模拟」，分数 $75 + 60 + 25 + 90 = 250$（有点记不清了）。 Zou Sir 说周一周二周三上午都去编程，期中考在机房下午考，真爽！ 阿来和 zjx 神佬都来机房了，我顺便稍微好好膜了一下，吸收到了一些 RP。不过阿来后面几天还是在 cz 训练，无法近距离吸收 RP 了 qwq。 $14:00 \\sim 18:30$做小火星的 NOIP 模拟题，目前分数还没出。 $21:12$开始写这篇游记！ 距 CSP 2023 已经过去了 3 周了 （我也摸鱼了 3 周），感觉时间过得好快啊…… 今年是我第一次参加 NOIP。 $\\textbf{2023.11.13 Mon.}$$\\textbf{2023.11.14 Tue.}$期中考考炸，语文考炸，科学考炸…… 语文是什么傻逼“台州书院附属中学”出的，跟个车巴一样，妈的文言文是什么台州的傻逼渔溪，有病，你 tm 台州算个什么啊，作文也是个车巴。 科学卷子一看到 qrc 出题的就知道没好事情了。 $\\textbf{2023.11.15 Wed.}$期中考考炸，数学考炸，社会道法考炸，英语考炸…… $\\textbf{2023.11.16 Thur.}$","link":"/article/2434149348/"},{"title":"NOIP 2023 游记（下）","text":"\\Huge \\textbf{++RP}123while (1) { ++rp;} $\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%$ 不忘去年之耻（上） 不忘去年之耻（下） 不忘今年之险（上） 不忘今年之险（下） 我发誓，如果我今年 NOIP 搞不到一等奖，我就退役！ 争取获得省选体验资格！ $\\textcolor{green}{\\textbf{2023.11.18 Sat.}}$$17:22$云斗 B 数据出来了，测了一下 $100$！ 目前估分 $100 + 100 + [35, 55] + 56 = [291, 311]$！ $18:12$发现洛谷上 A 和 B 的数据都出来了。 测了一下，都是 $100 \\textrm{pts}$。 $19:33$吃好饭回来，发现云斗 C 数据更新了，重测变成了 $65$！ 目前估分 $100 + 100 + [35, 65] + 56 = [291, 321]$！ 顺便测了一下 Abel 自己出的 A 的数据，$100$。 $19:41$测了一下核桃上的数据，这次 C T 了，估分 $100 + 100 + 35 + 56 = 291$。","link":"/article/699026561/"},{"title":"P5423 [USACO19OPEN]Valleys P 题解","text":"P5423 [USACO19OPEN]Valleys P 作为一个蒟蒻，自己的做法可能会有些地方比较傻，欢迎大佬们指出并改进并嘲讽我这个蒟蒻。 Solution首先，容易想到将所有的方格按照 $b[i][j]$ 从小到大进行排序，并依次遍历。 为方便叙述，将满足区域内的任意格子的高度低于该区域边界上任意格子的高度的区域叫做“弱山谷”。 设遍历到的方格是 $(i,j)$ ，将 $(i,j)$ 和与它有边相连的方格中，$b$ 值比 $b[i][j]$ 小的合并到同一个集合内。 容易发现每次合并后的集合都是弱山谷。 所以只用判断该区域是否有洞即可。 首先计算将 $(i,j)$ 加入弱山谷后，该弱山谷会增加多少个洞。 维护另一个并查集，将里面每一个方格都和与它有点相连的方格连边（这里的方格包括在 $N \\times N$ 方阵之外的无限高格子）。 将并查集中这个方格所连的边删去后，设与它有点相连的方格存在于 $x$ 个不同的连通块中。 显然，这个问题的答案就是 $\\max(0, x - 1)$。 但是从并查集中删边不好维护，考虑使用可撤销并查集。 按照把边删去的顺序反过来的顺序加边，删边直接撤销上一次操作即可。 再考虑将 $(i,j)$ 加入弱山谷后，该弱山谷是否会减少洞。 维护 $f[i][j]$ 表示与 $(i,j)$ 有点相连的方格中，已经加入弱山谷的数量。 显然，如果 $f[i][j] = 8$，那么将 $(i,j)$ 加入弱山谷后，该弱山谷的洞的数量会减少 $1$。 否则就不会减少。 每次操作后判断当前的弱山谷是否有洞，没有洞的话就加入答案。 说的可能有点难以理解，请大佬们原谅，把我的垃圾代码贴到下面。 Code123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;const ll maxn = 750;const ll N = maxn + 10;const ll INF = 0x3f3f3f3f3f3f3f3fll;ll n, m, l, cnt, ans, a[N][N], f[N][N], fa[N * N], g[N * N], sz[N * N], fa1[N * N], sz1[N * N];bool c[N][N];ll dx[5] = {0, 1, -1, 0, 0};ll dy[5] = {0, 0, 0, 1, -1};struct nde{ ll x, y, w;}b[N * N];bool cmp(nde p, nde q) { return p.w &lt; q.w;}ll get_fa(ll x){ if (fa[x] == x) { return x; } else { fa[x] = get_fa(fa[x]); return fa[x]; }}void mrge(ll x, ll y) { ll p = get_fa(x), q = get_fa(y); if (p == q) { return; } fa[q] = p; g[p] += g[q]; g[q] = 0; sz[p] += sz[q]; sz[q] = 0;}ll slve(ll x, ll y) { return (x - 1) * n + y;}struct nde1 { ll x, y, u, v;}B[N * N * 8];ll slve1(ll x, ll y) { return x * (n + 2) + y + 1;}ll get_fa1(ll x) { if (fa1[x] == x) { return x; } else { return get_fa1(fa1[x]); }}void mrge1(ll x, ll y, ll u, ll v) { ll p = get_fa1(x), q = get_fa1(y); if (p == q) { return; } if (sz1[p] &lt; sz1[q]) { swap(p, q); } ++cnt; B[cnt].x = q; B[cnt].y = fa1[q]; B[cnt].u = u; B[cnt].v = v; fa1[q] = p; sz1[p] += sz1[q]; sz1[q] = 0;}void re_mrge1() { fa1[B[cnt].x] = B[cnt].y; --cnt;}set&lt;ll&gt; st;int main() { scanf(&quot;%lld&quot;, &amp;n); l = 0; for (ll i = 1; i &lt;= n; ++i) { for (ll j = 1; j &lt;= n; ++j) { scanf(&quot;%lld&quot;, &amp;a[i][j]); ++l; b[l].x = i; b[l].y = j; b[l].w = a[i][j]; } } for (ll i = 1; i &lt;= n; ++i) { for (ll j = 1; j &lt;= n; ++j) { f[i][j] = 0; c[i][j] = 0; } } for (ll i = 1; i &lt;= l; ++i) { fa[i] = i; g[i] = 0; sz[i] = 1; } for (ll i = 0; i &lt;= n + 1; ++i) { a[0][i] = INF; a[n + 1][i] = INF; } for (ll i = 0; i &lt;= n + 1; ++i) { a[i][0] = INF; a[i][n + 1] = INF; } // 预处理可撤销并查集 for (ll i = 1; i &lt;= (n + 2) * (n + 2); ++i) { fa1[i] = i; sz1[i] = 1; } for (ll i = 0; i &lt;= n; ++i) { mrge1(slve1(0, i), slve1(0, i + 1), 0, 0); mrge1(slve1(n + 1, i), slve1(n + 1, i + 1), 0, 0); } for (ll i = 0; i &lt;= n; ++i) { mrge1(slve1(i, 0), slve1(i + 1, 0), 0, 0); mrge1(slve1(i, n + 1), slve1(i + 1, n + 1), 0, 0); } sort(b + 1, b + l + 1, cmp); cnt = 0; for (ll p = l; p &gt;= 1; --p) { ll x = b[p].x, y = b[p].y, w = b[p].w; for (ll i = -1; i &lt;= 1; ++i) { for (ll j = -1; j &lt;= 1; ++j) { ll xx = x + i, yy = y + j; if (!(xx == x &amp;&amp; yy == y)) { if (a[xx][yy] &gt; a[x][y]) { mrge1(slve1(x, y), slve1(xx, yy), x, y); } } } } } ans = 0; for (ll p = 1; p &lt;= l; ++p) { ll x = b[p].x, y = b[p].y, w = b[p].w; // 将该方格和与它有边相连的且高度小于它的合并到同一个集合 for (ll i = 1; i &lt;= 4; ++i) { ll xx = x + dx[i], yy = y + dy[i]; if (xx &gt;= 1 &amp;&amp; xx &lt;= n &amp;&amp; yy &gt;= 1 &amp;&amp; yy &lt;= n) { if (a[xx][yy] &lt; a[x][y]) { mrge(slve(x, y), slve(xx, yy)); } } } ll u = get_fa(slve(x, y)); // 删除洞 if (f[x][y] &gt;= 8) { --g[u]; } // 更新f值 f[x][y] = 0; c[x][y] = 1; for (ll i = -1; i &lt;= 1; ++i) { for (ll j = -1; j &lt;= 1; ++j) { ll xx = x + i, yy = y + j; if (xx &gt;= 1 &amp;&amp; xx &lt;= n &amp;&amp; yy &gt;= 1 &amp;&amp; yy &lt;= n) { if (!(xx == x &amp;&amp; yy == y)) { if (!c[xx][yy]) { ++f[xx][yy]; } } } } } // 统计增加了多少个洞 while (cnt &gt; 0 &amp;&amp; (B[cnt].u == x &amp;&amp; B[cnt].v == y)) { re_mrge1(); } st.clear(); for (ll i = -1; i &lt;= 1; ++i) { for (ll j = -1; j &lt;= 1; ++j) { ll xx = x + i, yy = y + j; if (!(xx == x &amp;&amp; yy == y)) { if (!c[xx][yy]) { ll q = get_fa1(slve1(xx, yy)); st.insert(q); } } } } if (ll(st.size()) &gt;= 1) { g[u] += (ll(st.size()) - 1); } if (g[u] == 0) { ans += sz[u]; } } printf(&quot;%lld&quot;, ans); return 0;}","link":"/article/1662229654/"},{"title":"PKUWC 2024 游记（上）","text":"\\Huge \\textbf{++RP}123while (1) { ++rp;} $\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%$ $\\textbf{2024.1.23 Tue.}$$\\textbf{2024.1.24 Wed.}$$\\textbf{2024.1.25 Thur.}$$\\textcolor{green}{\\textbf{2024.1.26 Fri.}}$$\\textcolor{green}{\\textbf{2024.1.27 Sat.}}$","link":"/article/3486178849/"},{"title":"PKUWC 2024 游记（下）","text":"\\Huge \\textbf{++RP}123while (1) { ++rp;} $\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%$ $\\textbf{2024.1.23 Tue.}$$\\textbf{2024.1.24 Wed.}$$\\textbf{2024.1.25 Thur.}$$\\textcolor{green}{\\textbf{2024.1.26 Fri.}}$$\\textcolor{green}{\\textbf{2024.1.27 Sat.}}$","link":"/article/2004269380/"},{"title":"ZJ 省选 2024 游记（上）","text":"\\Huge \\textbf{++RP}123while (1) { ++rp;} $\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%$ 不忘前年之耻（上） 不忘前年之耻（下） 不忘去年之险（上） 不忘去年之险（下） 不忘去年之脑瘫（上） 不忘去年之脑瘫（下） 不忘今年之险（上） 不忘今年之险（下） $\\textbf{2024.2.25 Sun.}$距 ZJ 省选仅剩 $6$ 天！ 开始写游记。 $\\textbf{2024.2.26 Mon.}$","link":"/article/1831741475/"},{"title":"ZJ 省选 2024 游记（下）","text":"\\Huge \\textbf{++RP}123while (1) { ++rp;} $\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%\\%$ 不忘前年之耻（上） 不忘前年之耻（下） 不忘去年之险（上） 不忘去年之险（下） 不忘去年之脑瘫（上） 不忘去年之脑瘫（下） 不忘今年之险（上） 不忘今年之险（下） $\\textbf{2024.2.25 Sun.}$","link":"/article/3583135558/"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/article/1243066710/"},{"title":"高斯消元学习笔记","text":"高斯消元Introduction高斯消元是一种用于解线性方程组的算法，其时间复杂度为 $O(n^3)$。 高斯消元有两种方式： 高斯消元法 高斯-约旦消元法 本文介绍高斯-约旦消元法。 Problem你有一个由 $n$ 个 $n$ 元一次方程组成的方程组： \\begin{cases} a_{1, 1} x_1 + a_{1, 2} x_2 + \\cdots + a_{1, n} x_n = b_1 \\\\ a_{2, 1} x_1 + a_{2, 2} x_2 + \\cdots + a_{2, n} x_n = b_2 \\\\ \\cdots \\\\ a_{n,1} x_1 + a_{n, 2} x_2 + \\cdots + a_{n, n} x_n = b_n \\end{cases}要求求解 $x_1, x_2, \\cdots, x_n$ 的值，或报告无解，或报告有无穷组解。 Analysis &amp; Procedure注： 本文参考了 题解 P2455 【[SDOI2006]线性方程组】 - Rui_R 的博客 - 洛谷博客 这篇题解。大部分高斯消元的题解在判无解或有无穷组解时都会出现一些问题，笔者认为这篇题解是比较正确的。 在数学中，我们通常采用代入消元法和加减消元法来解线性方程组。 高斯消元使用的是加减消元法。 先介绍大部分高斯消元的题解中的做法： 遍历 $n$ 个未知数，设当前为第 $i$ 个未知数： 在剩下的 $n - i + 1$ 个方程中找出当前未知数的系数的绝对值最大的一个方程： 若当前所有剩下的 $n - i + 1$ 个方程中该未知数的系数均为 $0$，则： 若当前所有剩下的 $n - i + 1$ 个方程中，常数项均为 $0$，则报告有无穷多组解，退出程序。 否则，报告无解，退出程序。 否则，用该方程去消掉其他 $n - 1$ 个方程的第 $i$ 个未知数。 然后，每个方程应当都被消成了 $k_ix_i = b_i$ 的形式，解得 $x_i = \\frac{b_i}{k_i}$。 但是该思路存在漏洞。如下面这组方程组： \\begin{cases} 0x + 2y = 3 \\\\ 0x + 0y = 0 \\end{cases}我们的程序会发现 $x$ 的系数均为 $0$，而 $0x + 2y = 3$ 中常数项不为 $0$，并报告无解。而答案是有无穷多组解。 显然，该方程组中 $y$ 的值是能确定的，且 $2y$ 和 $3$ 抵消后第 $1$ 个方程实际上变成了 $0x = 0$，该方程是有无穷多组解的，而非无解。 而且，我们的程序默认每个方程都会对应一个未知数，因此它会认为第 $1$ 个方程已经对应了未知数 $x$，就算它报告无解时不退出程序，在求 $y$ 时也只会考虑剩下的 $n - i + 1$ 个方程（i.e. 第 $2$ 个方程），也就无法求得 $y$ 的值。 因此，我们在找出当前未知数的系数的绝对值最大的一个方程时，要考虑全部的 $n$ 个方程。并且，发现当前未知数系数全部为 $0$ 时不能立即判断是无解还是有无穷多组解，而应当跳过当前的未知数，在最后一步求解未知数时再判断。 下面是算法的正确流程： 遍历 $n$ 个未知数，设当前为第 $i$ 个未知数： 在全部的 $n$ 个方程中找出当前未知数的系数的绝对值最大的一个方程（在前 $i - 1$ 个方程中，若这个方程已经对应了一个未知数，则不考虑该方程）： 若所有考虑的方程中该未知数的系数均为 $0$，则跳过该未知数。 否则，用该方程去消掉其他 $n - 1$ 个方程的第 $i$ 个未知数。 然后，每个方程应当都被消成了 $k_ix_i = b_i$ 的形式： 若 $k_i \\neq 0$，解得 $x_i = \\frac{b_i}{k_i}$。 否则： 若 $b_i = 0$，暂时认为有无穷多组解，不退出程序。 否则，报告无解并退出程序。 注意： 无解的优先级是比有无穷多组解大的，即使当前这个未知数是有无穷多组解的，剩下的几个未知数中也有可能出现无解的情况，故判断当前未知数有无穷多组解时不应退出程序，而应继续判断剩下的未知数。 Tips &amp; Tricks &amp; Note 要找出当前未知数的系数的绝对值最大的一个方程。（我总是忘了绝对值）顺便一提，这样做的目的是减小精度误差。 由于精度问题，判断一个浮点型变量 x 是否为 $0$ 时，要用 abs(x) &lt; EP。（EP 是一个很小的浮点数，一般取 1e-6）同理，判断一个浮点型变量 x 是否不为 $0$ 时，要用 abs(x) &gt; EP。（这里写成 &lt; 还是 &lt;=，或 &gt; 还是 &gt;= 没有关系） 有时候由于精度问题，一个实际为 $0$ 的浮点型变量会存储成一个小于 $0$ 的绝对值非常小的数，输出时会输出成 -0.00，若想正确输出可以使用 (abs(f[i]) &lt; EP ? 0.0 : f[i])。 大部分高斯消元的题解中的做法中，缺点只是不能准确地判断是无解还是有无穷多组解，但是还是能准确地判断是否有唯一解的。 Code这是 Luogu P2455 [SDOI2006] 线性方程组 的 AC 代码。（细节较多，建议作为模板使用，不要改动） 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;typedef long double db;const ll fn = 50;const ll N = fn + 10;const db EP = 1e-6;ll n, m, ans;db a[N][N], f[N];ll rd() { char ch = getchar(); ll s = 0, w = 1; while (ch &lt; '0' || ch &gt; '9') { if (ch == '-') { w = -1; } ch = getchar(); } while (ch &gt;= '0' &amp;&amp; ch &lt;= '9') { s = (s &lt;&lt; 3) + (s &lt;&lt; 1) + (ch ^ 48); ch = getchar(); } return (s * w);}void rd_str(string &amp;s) { char ch = getchar(); s = &quot; &quot;; while (ch &lt; 'a' || ch &gt; 'z') { ch = getchar(); } while (ch &gt;= 'a' &amp;&amp; ch &lt;= 'z') { s += ch; ch = getchar(); }}void print(ll x) { if (x &lt; 0) { putchar('-'); x = -x; } if (x &lt;= 9) { putchar(x + 48); return; } print(x / 10); putchar(x % 10 + 48);}int main() { n = rd(); for (ll i = 1; i &lt;= n; ++i) { for (ll j = 1; j &lt;= n + 1; ++j) { cin &gt;&gt; a[i][j]; } } for (ll i = 1; i &lt;= n; ++i) { ll p = i; for (ll j = 1; j &lt;= n; ++j) { if (abs(a[j][j]) &gt; EP &amp;&amp; j &lt; i) { continue; } if (abs(a[j][i]) &gt; abs(a[p][i])) { p = j; } } if (abs(a[p][i]) &lt; EP) { continue; } for (ll j = i; j &lt;= n + 1; ++j) { swap(a[i][j], a[p][j]); } for (ll j = 1; j &lt;= n; ++j) { if (i == j) { continue; } db u = a[j][i] / a[i][i]; for (ll k = i; k &lt;= n + 1; ++k) { a[j][k] -= u * a[i][k]; } } } ans = 0; for (ll i = 1; i &lt;= n; ++i) { if (abs(a[i][i]) &lt; EP) { if (abs(a[i][n + 1]) &gt; EP) { ans = -1; break; } else { ans = 1; } } else { f[i] = a[i][n + 1] / a[i][i]; } } if (ans == -1) { printf(&quot;-1&quot;); } else if (ans == 1) { printf(&quot;0&quot;); } else { for (ll i = 1; i &lt;= n; ++i) { cout &lt;&lt; &quot;x&quot; &lt;&lt; i &lt;&lt; &quot;=&quot; &lt;&lt; setprecision(2) &lt;&lt; fixed &lt;&lt; (abs(f[i]) &lt; EP ? 0.0 : f[i]) &lt;&lt; endl; } } return 0;} Exercises Luogu P3389 【模板】高斯消元法 （本题数据非常水，不具有参考价值） Luogu P2455 [SDOI2006] 线性方程组 （本题数据有一定强度，可以作为模板题） 求矩阵行列式参考： 数学(5)——线性代数：行列式 - Rey の 棚屋 - 洛谷博客","link":"/article/206633711/"}],"tags":[{"name":"并查集","slug":"并查集","link":"/tag/%E5%B9%B6%E6%9F%A5%E9%9B%86/"},{"name":"数学","slug":"数学","link":"/tag/%E6%95%B0%E5%AD%A6/"}],"categories":[{"name":"游记","slug":"游记","link":"/category/%E6%B8%B8%E8%AE%B0/"},{"name":"题解","slug":"题解","link":"/category/%E9%A2%98%E8%A7%A3/"},{"name":"算法学习笔记","slug":"算法学习笔记","link":"/category/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"pages":[{"title":"关于","text":"","link":"/about/index.html"},{"title":"留言板","text":"","link":"/comment/index.html"},{"title":"标签","text":"","link":"/tag/index.html"},{"title":"分类","text":"","link":"/category/index.html"},{"title":"赞赏","text":"如果喜欢我的博客，或者喜欢我的博客主题，可以考虑赞赏一下哦，非常感激！网站所需的服务器和 CDN 都是不小的开支，日常维护也需要大量精力。 你们的支持是我前进的最大动力！","link":"/donate/index.html"},{"title":"友情链接","text":"欢迎各位朋友前来交换友链，本站友链接受以下类型的网站： 个人博客 公益组织等非盈利性网站 不接受广告、商业性网站，特殊情况除外 如果你的网站 一个月以上无法正常访问 将会被移除。","link":"/friend/index.html"}]}